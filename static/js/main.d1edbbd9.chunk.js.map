{"version":3,"sources":["TaskList.js","InputDisplay.js","App3.js","reportWebVitals.js","index.js"],"names":["TaskList","tasks","setTasks","map","task","index","className","onClick","newTasks","splice","deleteHandler","InputDisplay","props","value","input","type","onChange","event","setInput","target","push","App3","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAsBeA,EAtBE,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SAOtB,OACA,8BACKD,EAAME,KAAI,SAACC,EAAMC,GACd,OACI,qCACI,wBAAQC,UAAU,aAAaC,QAAS,kBAXlC,SAACF,GACnB,IAAMG,EAAQ,YAAOP,GACrBO,EAASC,OAAOJ,EAAO,GACvBH,EAASM,GAQiDE,CAAcL,IAA5D,oBACA,4BAAID,aCSTO,EApBM,SAACC,GAQlB,OACE,gCAEE,uBACAC,MAAOD,EAAME,MACbC,KAAK,OACLC,SAAU,SAACC,GAAD,OAAWL,EAAMM,SAASD,EAAME,OAAON,UACjD,wBAAQP,UAAU,aAAaC,QAbd,WACrB,IAAMC,EAAQ,YAAOI,EAAMX,OACzBO,EAASY,KAAKR,EAAME,OACpBF,EAAMV,SAASM,GACfI,EAAMM,SAAS,KASb,6BCcOG,G,YAxBF,WAEb,MAA0BC,mBAAS,IAAnC,mBAAOR,EAAP,KAAcI,EAAd,KACA,EAA0BI,mBAAS,IAAnC,mBAAOrB,EAAP,KAAcC,EAAd,KAGE,OACE,gCACA,oBAAII,UAAU,UAAd,kCACA,cAAC,EAAD,CACEL,MAAOA,EACPC,SAAUA,IAEZ,cAAC,EAAD,CACAY,MAAOA,EACPI,SAAUA,EACVjB,MAAOA,EACPC,SAAYA,SCZDqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d1edbbd9.chunk.js","sourcesContent":["const TaskList = ({tasks, setTasks}) => {\n    const deleteHandler = (index) => {\n        const newTasks = [...tasks]\n        newTasks.splice(index, 1)\n        setTasks(newTasks)\n    }\n    \n    return (\n    <div>\n        {tasks.map((task, index) => {\n            return (\n                <>\n                    <button className=\"remove-btn\" onClick={() => deleteHandler(index)}>Delete</button>\n                    <p>{task}</p>\n                \n                </>\n            )\n        })}\n    </div>\n    )\n}\n\nexport default TaskList","// phil welsby - 26 aug 2021\n\nconst InputDisplay = (props) => {\n\n  const addTaskHandler = () => {\n    const newTasks = [...props.tasks]\n      newTasks.push(props.input)\n      props.setTasks(newTasks)\n      props.setInput(\"\")\n    }\n    return (\n      <div>\n        {/* <p>{props.input}</p> */}\n        <input  \n        value={props.input}\n        type=\"text\" \n        onChange={(event) => props.setInput(event.target.value)} />\n        <button className=\"submit-btn\" onClick={addTaskHandler}>Submit task</button>\n      </div>\n    )\n  }\n\nexport default InputDisplay","// phil welsby - 26 aug 2021\n\nimport {useState} from \"react\"\nimport TaskList from \"./TaskList\"\nimport InputDisplay from \"./InputDisplay\"\nimport OutputDisplay from \"./OutputDisplay\"\nimport \"./App.css\"\nconst App3 = () => {\n\nconst [input, setInput] = useState(\"\")\nconst [tasks, setTasks] = useState([])\n\n\n  return (\n    <div>\n    <h1 className=\"heading\">To-Do List Challenge</h1>\n    <TaskList \n      tasks={tasks}\n      setTasks={setTasks}\n    />\n    <InputDisplay \n    input={input}\n    setInput={setInput}\n    tasks={tasks}\n    setTasks = {setTasks}\n    />\n \n    </div>\n  )\n}\n\nexport default App3\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App3 from './App3';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App3 />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}